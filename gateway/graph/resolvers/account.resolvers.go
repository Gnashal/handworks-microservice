package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	generated "handworks-gateway/graph/generated"
	model "handworks-gateway/graph/generated/models"
	"handworks-gateway/graph/resolvers/helpers"
	"handworks/common/grpc/account"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"
)

// SignUpCustomer is the resolver for the signUpCustomer field.
func (r *mutationResolver) SignUpCustomer(ctx context.Context, firstName string, lastName string, email string, provider *string, clerkID string, role string) (*model.Customer, error) {
	accReq := &account.SignUpCustomerRequest{
		FirstName: firstName,
		LastName:  lastName,
		Email:     email,
		Provider:  *provider,
		ClerkId:   clerkID,
		Role:      role,
	}
	res, err := r.GrpcClients.AccClient.SignUpCustomer(ctx, accReq)
	if err != nil {
		r.Log.Error("Error signing up customer via Account service: %s", err)
		return nil, fmt.Errorf("failed to sign up customer: %w", err)
	}
	return helpers.MapCustomer(res.Customer), nil
}

// SignUpEmployee is the resolver for the signUpEmployee field.
func (r *mutationResolver) SignUpEmployee(ctx context.Context, firstName string, lastName string, email string, provider *string, clerkID string, role string, position string, hireDate time.Time) (*model.Employee, error) {
	accReq := &account.SignUpEmployeeRequest{
		FirstName: firstName,
		LastName:  lastName,
		Email:     email,
		Provider:  *provider,
		ClerkId:   clerkID,
		Role:      role,
		Position:  position,
		HireDate:  timestamppb.New(hireDate),
	}
	res, err := r.GrpcClients.AccClient.SignUpEmployee(ctx, accReq)
	if err != nil {
		r.Log.Error("Error signing up employee via Account service: %s", err)
		return nil, fmt.Errorf("failed to sign up employee: %w", err)
	}
	return helpers.MapEmployee(res.Employee), nil
}

// UpdateCustomer is the resolver for the updateCustomer field.
func (r *mutationResolver) UpdateCustomer(ctx context.Context, id string, firstName *string, lastName *string, email *string) (*model.Customer, error) {
	accReq := &account.UpdateCustomerRequest{
		Id:        id,
		FirstName: *firstName,
		LastName:  *lastName,
		Email:     *email,
	}
	res, err := r.GrpcClients.AccClient.UpdateCustomer(ctx, accReq)
	if err != nil {
		r.Log.Error("Error updating customer via Account service: %s", err)
		return nil, fmt.Errorf("failed to update customer: %w", err)
	}
	return helpers.MapCustomer(res.Customer), nil
}

// UpdateEmployee is the resolver for the updateEmployee field.
func (r *mutationResolver) UpdateEmployee(ctx context.Context, id string, firstName *string, lastName *string, email *string) (*model.Employee, error) {
	accReq := &account.UpdateEmployeeRequest{
		Id:        id,
		FirstName: *firstName,
		LastName:  *lastName,
		Email:     *email,
	}
	res, err := r.GrpcClients.AccClient.UpdateEmployee(ctx, accReq)
	if err != nil {
		r.Log.Error("Error updating employee via Account service: %s", err)
		return nil, fmt.Errorf("failed to update employee: %w", err)
	}
	return helpers.MapEmployee(res.Employee), nil
}

// UpdateEmployeePerformanceScore is the resolver for the updateEmployeePerformanceScore field.
func (r *mutationResolver) UpdateEmployeePerformanceScore(ctx context.Context, id string, newPerformanceScore float64) (*model.Employee, error) {
	accReq := &account.UpdatePerformanceScoreRequest{
		Id:                  id,
		NewPerformanceScore: float32(newPerformanceScore),
	}
	res, err := r.GrpcClients.AccClient.UpdateEmployeePerformanceScore(ctx, accReq)
	if err != nil {
		r.Log.Error("Error updating employee performance score via Account service: %s", err)
		return nil, fmt.Errorf("failed to update employee performance score: %w", err)
	}
	return helpers.MapEmployee(res.Employee), nil
}

// UpdateEmployeeStatus is the resolver for the updateEmployeeStatus field.
func (r *mutationResolver) UpdateEmployeeStatus(ctx context.Context, id string, status model.EmployeeStatus) (*model.Employee, error) {
	// TODO: Continue tomorrow

	// accReq := &account.UpdateEmployeeStatusRequest{
	// 	Id:     id,
	// 	Status: account.EmployeeStatus(account.EmployeeStatus_name[string(status)]),
	// }
	return nil, nil
}

// DeleteEmployee is the resolver for the deleteEmployee field.
func (r *mutationResolver) DeleteEmployee(ctx context.Context, id string, empID string) (*model.Employee, error) {
	panic(fmt.Errorf("not implemented: DeleteEmployee - deleteEmployee"))
}

// DeleteCustomer is the resolver for the deleteCustomer field.
func (r *mutationResolver) DeleteCustomer(ctx context.Context, id string, custID string) (*model.Customer, error) {
	panic(fmt.Errorf("not implemented: DeleteCustomer - deleteCustomer"))
}

// Customer is the resolver for the customer field.
func (r *queryResolver) Customer(ctx context.Context, id string) (*model.Customer, error) {
	accReq := &account.GetCustomerRequest{Id: id}
	res, err := r.GrpcClients.AccClient.GetCustomer(ctx, accReq)
	if err != nil {
		r.Log.Error("Error fetching customer from Account service: %s", err)
		return nil, fmt.Errorf("failed to get customer: %w", err)
	}
	return helpers.MapCustomer(res.Customer), nil
}

// Employee is the resolver for the employee field.
func (r *queryResolver) Employee(ctx context.Context, id string) (*model.Employee, error) {
	accReq := &account.GetEmployeeRequest{Id: id}
	res, err := r.GrpcClients.AccClient.GetEmployee(ctx, accReq)
	if err != nil {
		r.Log.Error("Error fetching employee from Account service: %s", err)
		return nil, fmt.Errorf("failed to get employee: %w", err)
	}
	return helpers.MapEmployee(res.Employee), nil
}

// No need to touch this bottom code :D - Yousif

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
