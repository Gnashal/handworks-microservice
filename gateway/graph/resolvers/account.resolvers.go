package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	generated1 "handworks-gateway/graph/generated"
	generated "handworks-gateway/graph/generated/models"
)

// CreateAccount is the resolver for the createAccount field.
func (r *mutationResolver) CreateAccount(ctx context.Context, firstName string, middleName *string, lastName string, accType string) (*generated.Account, error) {
	idNum := r.helpers.GenerateIdNum()
	acc := &generated.Account{
		ID:         fmt.Sprintf("T%d", idNum),
		FirstName:  firstName,
		MiddleName: middleName,
		LastName:   lastName,
		Status:     true,
		AccType:    accType,
	}
	r.accounts = append(r.accounts, acc)
	return acc, nil
}

// UpdateAccountStatus is the resolver for the updateAccountStatus field.
func (r *mutationResolver) UpdateAccountStatus(ctx context.Context, id string, status bool) (*generated.Account, error) {
	var acc *generated.Account

	for _, a := range r.accounts {
		if a.ID == id {
			acc = a
			a.Status = status
		}
	}
	return acc, nil
}

// AddCustomerToWatchlist is the resolver for the addCustomerToWatchlist field.
func (r *mutationResolver) AddCustomerToWatchlist(ctx context.Context, customerID string) (*generated.WatchList, error) {
	panic(fmt.Errorf("not implemented: AddCustomerToWatchlist - addCustomerToWatchlist"))
}

// Accounts is the resolver for the accounts field.
func (r *queryResolver) Accounts(ctx context.Context) ([]*generated.Account, error) {
	return r.accounts, nil
}

// Customers is the resolver for the customers field.
func (r *queryResolver) Customers(ctx context.Context) ([]*generated.Customer, error) {
	return r.customers, nil
}

// Employees is the resolver for the employees field.
func (r *queryResolver) Employees(ctx context.Context) ([]*generated.Employee, error) {
	return r.employees, nil
}

// Admins is the resolver for the admins field.
func (r *queryResolver) Admins(ctx context.Context) ([]*generated.Admin, error) {
	return r.admins, nil
}

// Watchlist is the resolver for the watchlist field.
func (r *queryResolver) Watchlist(ctx context.Context) ([]*generated.WatchList, error) {
	return r.watchList, nil
}

// Mutation returns generated1.MutationResolver implementation.
func (r *Resolver) Mutation() generated1.MutationResolver { return &mutationResolver{r} }

// Query returns generated1.QueryResolver implementation.
func (r *Resolver) Query() generated1.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
