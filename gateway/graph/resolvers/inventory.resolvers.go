package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"handworks-gateway/graph/generated/models"
	"handworks-gateway/graph/resolvers/helpers"
	"handworks/common/grpc/inventory"
)

// CreateItem is the resolver for the createItem field.
func (r *mutationResolver) CreateItem(ctx context.Context, input models.CreateItemInput) (*models.InventoryItem, error) {
	req := &inventory.CreateItemRequest{
		Name:     input.Name,
		Type:     input.Type,
		Category: input.Category,
		Quantity: input.Quantity,
		Unit:     input.Unit,
		ImageUrl: *input.ImageURL,
	}
	res, err := r.GrpcClients.InventoryClient.CreateItem(ctx, req)
	if err != nil {
		r.Log.Error("Failed to create item: %s", err)
		return nil, err
	}
	return helpers.MapInventoryItem(res.Item), nil
}

// UpdateItem is the resolver for the updateItem field.
func (r *mutationResolver) UpdateItem(ctx context.Context, input models.UpdateItemInput) (*models.InventoryItem, error) {
	req := &inventory.UpdateItemRequest{
		Id:          input.ID,
		Name:        input.Name,
		Type:        input.Type,
		Status:      input.Status,
		Category:    input.Category,
		Quantity:    input.Quantity,
		MaxQuantity: input.MaxQuantity,
	}
	res, err := r.GrpcClients.InventoryClient.UpdateItem(ctx, req)
	if err != nil {
		r.Log.Error("Failed to update item: %s", err)
		return nil, err
	}
	return helpers.MapInventoryItem(res.Item), nil
}

// DeleteItem is the resolver for the deleteItem field.
func (r *mutationResolver) DeleteItem(ctx context.Context, id string) (*models.InventoryItem, error) {
	req := &inventory.DeleteItemRequest{
		Id: id,
	}
	res, err := r.GrpcClients.InventoryClient.DeleteItem(ctx, req)
	if err != nil {
		r.Log.Error("Failed to delete item: %s", err)
		return nil, err
	}
	return helpers.MapInventoryItem(res.Item), nil
}

// GetItem is the resolver for the getItem field.
func (r *queryResolver) GetItem(ctx context.Context, id string) (*models.InventoryItem, error) {
	req := &inventory.GetItemRequest{
		Id: id,
	}
	res, err := r.GrpcClients.InventoryClient.GetItem(ctx, req)
	if err != nil {
		r.Log.Error("Failed to get item: %s", err)
		return nil, err
	}
	return helpers.MapInventoryItem(res.Item), nil
}

// ListAllItems is the resolver for the listAllItems field.
func (r *queryResolver) ListAllItems(ctx context.Context) ([]*models.InventoryItem, error) {
	res, err := r.GrpcClients.InventoryClient.ListAllItems(ctx, &inventory.Empty{})
	if err != nil {
		r.Log.Error("Failed to get items: %s", err)
		return nil, err
	}
	return helpers.MapInventoryItems(res.Items), nil
}

// ListItemsByType is the resolver for the listItemsByType field.
func (r *queryResolver) ListItemsByType(ctx context.Context, typeArg string) ([]*models.InventoryItem, error) {
	req := &inventory.ListItemsByTypeRequest{
		Type: typeArg,
	}
	res, err := r.GrpcClients.InventoryClient.ListItemsByType(ctx, req)
	if err != nil {
		r.Log.Error("Failed to get items: %s", err)
		return nil, err
	}
	return helpers.MapInventoryItems(res.Items), nil
}

// ListItemsByStatus is the resolver for the listItemsByStatus field.
func (r *queryResolver) ListItemsByStatus(ctx context.Context, status string) ([]*models.InventoryItem, error) {
	req := &inventory.ListItemsByStatusRequest{
		Status: status,
	}
	res, err := r.GrpcClients.InventoryClient.ListItemsByStatus(ctx, req)
	if err != nil {
		r.Log.Error("Failed to get items: %s", err)
		return nil, err
	}
	return helpers.MapInventoryItems(res.Items), nil
}

// ListItemsByCategory is the resolver for the listItemsByCategory field.
func (r *queryResolver) ListItemsByCategory(ctx context.Context, category string) ([]*models.InventoryItem, error) {
	req := &inventory.ListItemsByCategoryRequest{
		Category: category,
	}
	res, err := r.GrpcClients.InventoryClient.ListItemsByCategory(ctx, req)
	if err != nil {
		r.Log.Error("Failed to get items: %s", err)
		return nil, err
	}
	return helpers.MapInventoryItems(res.Items), nil
}
