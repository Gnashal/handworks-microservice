scalar Time

type Account {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  provider: String
  role: String!
  clerkId: String!
  createdAt: Time!
  updatedAt: Time!
}

type Customer {
  id: ID!
  account: Account!
}

enum EmployeeStatus {
  ACTIVE
  ONDUTY
  INACTIVE
}

type Employee {
  id: ID!
  account: Account!
  position: String!
  status: EmployeeStatus!
  performanceScore: Float!
  hireDate: Time!
  numRatings: Int!
}

type Query {
  customer(id: ID!): Customer
  employee(id: ID!): Employee
}
type Mutation {
  signUpCustomer(
    firstName: String!
    lastName: String!
    email: String!
    provider: String
    clerkId: String!
    role: String!
  ): Customer!

  signUpEmployee(
    firstName: String!
    lastName: String!
    email: String!
    provider: String
    clerkId: String!
    role: String!
    position: String!
    hireDate: Time!
  ): Employee!

  updateCustomer(
    id: ID!
    firstName: String
    lastName: String
    email: String
  ): Customer!

  updateEmployee(
    id: ID!
    firstName: String
    lastName: String
    email: String
  ): Employee!

  updateEmployeePerformanceScore(
    id: ID!
    newPerformanceScore: Float!
  ): Employee!

  updateEmployeeStatus(
    id: ID!
    status: EmployeeStatus!
  ): Employee!

  deleteEmployee(id: ID!, empId: ID!): Employee!
  deleteCustomer(id: ID!, custId: ID!): Customer!
}
